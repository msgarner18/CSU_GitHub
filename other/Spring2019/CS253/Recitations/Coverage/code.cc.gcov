        -:    0:Source:code.cc
        -:    0:Graph:code.gcno
        -:    0:Data:code.gcda
        -:    0:Runs:0
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <time.h>
        -:    4:#include <cassert>
        -:    5:#include <sstream>
        -:    6:using namespace std;
        -:    7:
        -:    8:class Date {
        -:    9:  public:
        -:   10:    Date();
        -:   11:    // Default copy ctor is fine
        -:   12:    // Default assignment operator is fine
        -:   13:    Date(int year, int month, int day);
        -:   14:
        -:   15:    int getday() const;
        -:   16:    int getmonth() const;
        -:   17:    int getyear() const;
        -:   18:
        -:   19:    void setday(int);
        -:   20:    void setmonth(int);
        -:   21:    void setyear(int);
        -:   22:
        -:   23:    Date &operator+=(int);
        -:   24:    int operator-(const Date &) const;
        -:   25:
        -:   26:    Date operator+(int) const;
        -:   27:    const Date &operator++();	// prefix
        -:   28:    Date operator++(int);		// postfix
        -:   29:
        -:   30:    Date operator-(int) const;
        -:   31:    Date &operator-=(int);
        -:   32:    const Date &operator--();	// prefix
        -:   33:    Date operator--(int);		// postfix
        -:   34:
        -:   35:    bool operator<(const Date &) const;
        -:   36:    bool operator<=(const Date &) const;
        -:   37:    bool operator>(const Date &) const;
        -:   38:    bool operator>=(const Date &) const;
        -:   39:    bool operator==(const Date &) const;
        -:   40:    bool operator!=(const Date &) const;
        -:   41:
        -:   42:  protected:
        -:   43:    static int ymd_to_daynum(int year, int month, int day);
        -:   44:    int daynum;				// 1 = January 1, year 1
        -:   45:};
        -:   46:
        -:   47:Date operator+(int, const Date &);
        -:   48:ostream &operator<<(ostream &out, const Date &);	// YYYY-MM-DD
        -:   49:istream &operator>>(istream &in, Date &);		// YYYY-MM-DD
        -:   50:
    #####:   51:static bool leap(int year) {
    #####:   52:    assert(1 <= year && year <= 9999);
    #####:   53:    if (year % 4 != 0)			// Divisible by 400?
    #####:   54:	return false;				// It’s a leap year.
    #####:   55:    if (year % 400 == 0)			// Divisible by 100?
    #####:   56:	return true;				// Not a leap year.
    #####:   57:    if (year % 100 == 0)				// Divisible by 4?
    #####:   58:	return false;				// It’s a leap year.
    #####:   59:    return true;				// Boring old ordinary year.
        -:   60:}
        -:   61:
    #####:   62:static int days_per_year(int year) {
    #####:   63:    assert(1 <= year && year <= 9999);
    #####:   64:    return leap(year) ? 366 : 365;
        -:   65:}
        -:   66:
    #####:   67:static int days_per_month(int year, int month) {
    #####:   68:    assert(1 <= year && year <= 9999);
    #####:   69:    assert(1 <= month && month <= 12);
    #####:   70:    const int days[] = {00,31,28,31,30,31,30,31,31,30,31,30,31};
    #####:   71:    if (month==2 && leap(year))
    #####:   72:	return 29;
    #####:   73:    return days[month];
        -:   74:}
        -:   75:
    #####:   76:int Date::ymd_to_daynum(int year, int month, int day) {
    #####:   77:    assert(1 <= year && year <= 9999);
    #####:   78:    assert(1 <= month && month <= 12);
    #####:   79:    assert(1 <= day && day <= 31);
        -:   80:
        -:   81:    // Start at Jan 1, 0001, and increment until we get to what we want
    #####:   82:    int daynum=1;
        -:   83:
    #####:   84:    for (int y=1; y < year; y++)
    #####:   85:	daynum += days_per_year(y);
        -:   86:
    #####:   87:    for (int m=1; m < month; m++)
    #####:   88:	daynum += days_per_month(year, m);
        -:   89:
        -:   90:    // We're now poised at the first day of that month
    #####:   91:    daynum += day-1;
        -:   92:
    #####:   93:    assert(1 <= daynum && daynum <= 10000 * 366);
    #####:   94:    return daynum;
        -:   95:}
        -:   96:
    #####:   97:static void daynum_to_ymd(int daynum, int &year, int &month, int &day) {
    #####:   98:    assert(1 <= daynum && daynum <= 10000 * 366);
        -:   99:
    #####:  100:    int y=1, m=1, d=1;
        -:  101:
        -:  102://#if 0
        -:  103:    // Jump forward by years, at first.  This reduces the iterations,
        -:  104:    // for modern dates, from ~733k to ~2181.
    #####:  105:    while (daynum >= 366)
    #####:  106:	daynum -= days_per_year(y++);
        -:  107://#endif
        -:  108:
    #####:  109:    for (; daynum>1; daynum--) {
        -:  110:	// Increment y-m-d
    #####:  111:	d++;
    #####:  112:	if (d > days_per_month(y,m)) {
    #####:  113:	    m++;
    #####:  114:	    d=1;
    #####:  115:	    if (m > 12) {
    #####:  116:		y++;
    #####:  117:		m=1;
        -:  118:	    }
        -:  119:	}
        -:  120:    }
        -:  121:
    #####:  122:    year = y;
    #####:  123:    month = m;
    #####:  124:    day = d;
        -:  125:
    #####:  126:    assert(1 <= year && year <= 9999);
    #####:  127:    assert(1 <= month && month <= 12);
    #####:  128:    assert(1 <= day && day <= 31);
    #####:  129:}
        -:  130:
    #####:  131:Date::Date(int year, int month, int day)
    #####:  132:: daynum(ymd_to_daynum(year, month, day)) {
    #####:  133:    assert(1 <= year && year <= 9999);
    #####:  134:    assert(1 <= month && month <= 12);
    #####:  135:    assert(1 <= day && day <= 31);
    #####:  136:    assert(1 <= daynum && daynum <= 10000 * 366);
    #####:  137:}
        -:  138:
    #####:  139:Date::Date() {
    #####:  140:    const time_t now = time(nullptr);	    // Seconds since 1970 started
    #####:  141:    struct tm *tm = localtime(&now);	    // year/month/day/hour/min/sec
    #####:  142:    daynum = ymd_to_daynum(tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday);
        -:  143:    // Yes, 1900.  That’s not a Y2K bug--that’s how localtime is defined.
    #####:  144:}
        -:  145:
    #####:  146:int Date::getday() const {
        -:  147:    int year, month, day;
    #####:  148:    daynum_to_ymd(daynum, year, month, day);
    #####:  149:    return day;
        -:  150:}
        -:  151:
    #####:  152:int Date::getmonth() const {
        -:  153:    int year, month, day;
    #####:  154:    daynum_to_ymd(daynum, year, month, day);
    #####:  155:    return month;
        -:  156:}
        -:  157:
    #####:  158:int Date::getyear() const {
        -:  159:    int year, month, day;
    #####:  160:    daynum_to_ymd(daynum, year, month, day);
    #####:  161:    return year;
        -:  162:}
        -:  163:
    #####:  164:void Date::setday(int new_day) {
        -:  165:    int year, month, day;
    #####:  166:    daynum_to_ymd(daynum, year, month, day);
    #####:  167:    daynum = ymd_to_daynum(year, month, new_day);
    #####:  168:}
        -:  169:
    #####:  170:void Date::setmonth(int new_month) {
        -:  171:    int year, month, day;
    #####:  172:    daynum_to_ymd(daynum, year, month, day);
    #####:  173:    daynum = ymd_to_daynum(year, new_month, day);
    #####:  174:}
        -:  175:
    #####:  176:void Date::setyear(int new_year) {
        -:  177:    int year, month, day;
    #####:  178:    daynum_to_ymd(daynum, year, month, day);
    #####:  179:    daynum = ymd_to_daynum(new_year, month, day);
    #####:  180:}
        -:  181:
        -:  182:// This one stands alone
        -:  183:
    #####:  184:int Date::operator-(const Date &rhs) const {
    #####:  185:    return daynum - rhs.daynum;
        -:  186:}
        -:  187:
        -:  188:// This does the real work of all numeric operations.
        -:  189:// All other operators (+, -, ++, -=, etc) should invoke operator+=.
        -:  190:
    #####:  191:Date &Date::operator+=(int value) {
    #####:  192:    daynum += value;
    #####:  193:    return *this;
        -:  194:}
        -:  195:
    #####:  196:Date Date::operator+(int value) const {
    #####:  197:    Date result = *this;
    #####:  198:    return result += value;
        -:  199:}
        -:  200:
    #####:  201:const Date &Date::operator++() {			// prefix
    #####:  202:    *this += 1;
    #####:  203:    return *this;
        -:  204:}
        -:  205:
    #####:  206:Date Date::operator++(int /* dummy */) {		// postfix
    #####:  207:    const auto before = *this;
    #####:  208:    *this += 1;
    #####:  209:    return before;
        -:  210:}
        -:  211:
    #####:  212:Date Date::operator-(int value) const {
    #####:  213:    return *this + -value;
        -:  214:}
        -:  215:
    #####:  216:Date &Date::operator-=(int value) {
    #####:  217:    return *this += -value;
        -:  218:}
        -:  219:
    #####:  220:const Date &Date::operator--() {			// prefix
    #####:  221:    *this -= 1;
    #####:  222:    return *this;
        -:  223:}
        -:  224:
    #####:  225:Date Date::operator--(int /* dummy */) {		// postfix
    #####:  226:    Date before = *this;
    #####:  227:    *this -= 1;
    #####:  228:    return before;
        -:  229:}
        -:  230:
        -:  231:
    #####:  232:bool Date::operator<(const Date &rhs) const {
    #####:  233:    return daynum < rhs.daynum;
        -:  234:}
        -:  235:
    #####:  236:bool Date::operator<=(const Date &rhs) const {
    #####:  237:    return daynum <= rhs.daynum;
        -:  238:}
        -:  239:
    #####:  240:bool Date::operator>(const Date &rhs) const {
    #####:  241:    return daynum > rhs.daynum;
        -:  242:}
        -:  243:
    #####:  244:bool Date::operator>=(const Date &rhs) const {
    #####:  245:    return daynum >= rhs.daynum;
        -:  246:}
        -:  247:
    #####:  248:bool Date::operator==(const Date &rhs) const {
    #####:  249:    return daynum == rhs.daynum;
        -:  250:}
        -:  251:
    #####:  252:bool Date::operator!=(const Date &rhs) const {
    #####:  253:    return daynum != rhs.daynum;
        -:  254:}
        -:  255:/*
        -:  256:Date operator+(int value, const Date &rhs) {
        -:  257:    return rhs + value;
        -:  258:}
        -:  259:*/
    #####:  260:ostream &operator<<(ostream &out, const Date &d) {
    #####:  261:    return out << d.getyear() << '-' << d.getmonth() << '-' << d.getday();
        -:  262:}
        -:  263:
        -:  264:#include <iomanip>
        -:  265:
    #####:  266:istream &operator>>(istream &in, Date &d) {
        -:  267:    int year, month, day;
        -:  268:    char c1, c2;
    #####:  269:    if (in >> year  >> c1 && c1=='-'
    #####:  270:     && in >> month >> c2 && c2=='-'
    #####:  271:     && in >> day)
    #####:  272:	d = Date(year, month, day);
        -:  273:    else
    #####:  274:	in.setstate(ios::failbit);	// Input failed, so spoil the stream
    #####:  275:    return in;
        -:  276:}
        -:  277:
        -:  278:
    #####:  279:int main() {
        -:  280:    // Read & display some dates
    #####:  281:    ifstream data("data");
    #####:  282:    Date d;
        -:  283:    // Read each line, try to convert it to a date, complain if it fails.
    #####:  284:    for (string s; getline(data, s); ) {
    #####:  285:	istringstream iss(s);	// Initialize stream with string
    #####:  286:	if (iss >> d)		// Try to convert to a date
    #####:  287:	    cout << d << '\n';
        -:  288:	else
    #####:  289:	    cerr << "Bad date \"" << s << "\"\n";
        -:  290:    }
        -:  291:
    #####:  292:    const Date a(2009,3,4);
    #####:  293:    cout << a << '\n';		// Wed Mar 4 2009
        -:  294:
    #####:  295:    const Date b(a);
    #####:  296:    cout << b << '\n';		// Wed Mar 4 2009
        -:  297:
    #####:  298:    Date c; c=a;
    #####:  299:    cout << c << '\n';		// Wed Mar 4 2009
        -:  300:    
    #####:  301:    c.setday(10);
    #####:  302:    c.setmonth(5);
    #####:  303:    c.setyear(1000);
        -:  304:    
    #####:  305:    c = c+1;
    #####:  306:    cout << c << '\n';		// Thu Mar 5 2009
    #####:  307:    c += 9;
    #####:  308:    cout << c << '\n';		// Sat Mar 14 2009
    #####:  309:    d = ++c;
    #####:  310:    cout << c << '\n';		// Sun Mar 15 2009
    #####:  311:    cout << d << '\n';		// Sun Mar 15 2009
        -:  312:
    #####:  313:    d = c++;
    #####:  314:    cout << c << '\n';		// Mon Mar 16 2009
    #####:  315:    cout << d << '\n';		// Sun Mar 15 2009
        -:  316:
    #####:  317:    Date e = d-1;
    #####:  318:    cout << e << '\n';		// Sat Mar 14 2009
    #####:  319:    d = e--;
    #####:  320:    cout << d << '\n';		// Sat Mar 14 2009
    #####:  321:    cout << e << '\n';		// Fri Mar 13 2009
    #####:  322:    d = --e;
    #####:  323:    cout << d << '\n';		// Thu Mar 12 2009
    #####:  324:    cout << e << '\n';		// Thu Mar 12 2009
    #####:  325:    e -= 5;
    #####:  326:    cout << e << '\n';		// Sat Mar 7 2009
    #####:  327:    e -= -2;
    #####:  328:    cout << e << '\n';		// Mon Mar 9 2009
    #####:  329:    cout << d-e << '\n';	// 3
    #####:  330:    cout << e-d << '\n';	// -3
        -:  331:
        -:  332:    // a==b, a<c
    #####:  333:    cout << ((a==b) ? "== good\n" : "== bad\n");
    #####:  334:    cout << ((a==c) ? "== bad\n"  : "== good\n");
    #####:  335:    cout << ((a!=c) ? "!= good\n" : "!= bad\n");
    #####:  336:    cout << ((a!=b) ? "!= bad\n"  : "!= good\n");
    #####:  337:    cout << ((a<c)  ? "<  good\n" : "<  bad\n");
    #####:  338:    cout << ((a<b)  ? "<  bad\n"  : "<  good\n");
    #####:  339:    cout << ((c>a)  ? ">  good\n" : ">  bad\n");
    #####:  340:    cout << ((b>a)  ? ">  bad\n"  : ">  good\n");
    #####:  341:    cout << ((a<=b) ? "<= good\n" : "<= bad\n");
    #####:  342:    cout << ((a<=c) ? "<= good\n" : "<= bad\n");
    #####:  343:    cout << ((c<=a) ? "<= bad\n"  : "<= good\n");
    #####:  344:    cout << ((a>=b) ? ">= good\n" : ">= bad\n");
    #####:  345:    cout << ((c>=a) ? ">= good\n" : ">= bad\n");
    #####:  346:    cout << ((a>=c) ? ">= bad\n"  : ">= good\n");
        -:  347:
    #####:  348:    return 0;
        -:  349:}
